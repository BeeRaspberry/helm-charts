cluster:
  podsecuritypolicy:
    create: false

postgresql:
  enabled: true
  psp.create: true
  rbac.create: true

beeApi:
  ReplicaCount: 1
  
  image:
    repository: beeraspberry/bee-api
    version: latest
    pullPolicy: Always
  
  imagePullSecrets: []
  
  volumes:
    - name: bee-api-volume
      persistentVolumeClaim:
        claimName: bee-api-claim
  
  volumeMounts:
    - mountPath: "/data"
      name: bee-api-volume
  
  database:
    enabled: true
    port: "5432"
    username: beeapi
    password: "test"
    host: "test"
    databaseName: beeapi
    type: postgresql
  
  
  env:
    - name: DATABASE_DIR
      value: "/data"
    - name: DOMAIN_NAME
      value: example.com
    - name: PORT
      value: 8080
    - name: SERVICE_NAME
      value: http://localhost
  
  nameOverride: ""
  fullnameOverride: ""
  
  persistence:
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
    storageClass: manual
    accessMode: ReadWriteOnce
    size: 8Gi
    annotations: {}
  
  serviceAccount:
  # Specifies whether a service account should be created
    create: true
  # Annotations to add to the service account
    annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
    name:
  
  podSecurityContext: {}
  # fsGroup: 2000
  
  securityContext: 
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
  
  service:
    type: LoadBalancer
    ports:
    - name: http-bee-api
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https-bee-api
      port: 443
      protocol: TCP
      targetPort: 443
  
  ingress:
    enabled: false
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: map-example.local
        paths: []
    tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  
  resources:
    limits:
      cpu: 0.5
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 50Mi
  
  nodeSelector: {}
  
  tolerations: []
  
  affinity: {}
  
  frontend:
    enabled: false
  
  cluster-security:
    podsecuritypolicy:
      create: true
  
  bee-security:
    podsecuritypolicy:
      create: true

beeUi:
  replicaCount: 1
  image:
    repository: bee-ui
    pullPolicy: Never
    version: latest
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
  # Specifies whether a service account should be created
    create: true
  # Annotations to add to the service account
    annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
    name:
  podSecurityContext: {}
  # fsGroup: 2000
  securityContext: 
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  #  runAsNonRoot: true
  #  runAsUser: 1000
  service:
    type: LoadBalancer
    ports:
    - name: http-bee-web
      port: 80
      protocol: TCP
      targetPort: 8080
  ingress:
    enabled: true
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: map-example.local
        paths: []
    tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  resources:
    limits:
      cpu: 0.5
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 50Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  frontend:
    enabled: false
  backend_api:
    host: localhost
    port: "8080"
  # http or https
    protocol: http
  env:
    - name: DEBUG
      value: "false"
    - name: PRODUCTION
      value: "true"
    - name: SERVICE_NAME
      value: http://localhost
    - name: PORT
      value: "8080"
    - name: DOMAIN_NAME
      value: example.com
